# Use the latest version of the Docker Compose file format
version: '3.8'

# Define the services for your application
services:
  backend:
    # Specify the build context and Dockerfile for the backend service
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Define environment variables for the backend
    environment:
      # Railway automatically injects DATABASE_URL, NODE_ENV, and PORT
      # Listing them here makes it explicit and can override Railway defaults if needed (use with caution)
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT} # Ensure your backend code uses process.env.PORT

      # Custom variables needed by your backend
      FRONTEND_URL: ${FRONTEND_URL}

      # Other non-sensitive variables your backend might need...
    # Restart policy for the container
    restart: unless-stopped

  frontend:
    # Specify the build context and Dockerfile for the frontend service
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Define environment variables for the frontend
    environment:
      # Railway automatically injects PORT for the frontend container
      PORT: ${PORT} # Next.js production server listens on this by default

      # Custom NEXT_PUBLIC_ variables needed by your frontend (client-side and server-side)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WEBSOCKET_URL: ${NEXT_PUBLIC_WEBSOCKET_URL}

      # List any other NEXT_PUBLIC_ variables your frontend uses...
    # Ensure the frontend service depends on the backend service starting first
    depends_on:
      - backend
    # Restart policy for the container
    restart: unless-stopped

# Define networks if needed (Docker Compose creates a default bridge network)
# volumes:
#   db_data: # Example volume for database