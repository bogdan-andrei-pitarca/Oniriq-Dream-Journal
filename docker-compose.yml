# Use the latest version of the Docker Compose file format
version: '3.8'

# Define the services for your application
services:
  backend:
    # Specify the build context and Dockerfile for the backend service
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Map the port inside the container to a port on the host (useful for local testing, Railway handles this differently)
    # Remove or comment out for production on Railway if you rely solely on their networking
    # ports:
    #   - "5000:5000"
    # Define environment variables for the backend
    environment:
      # Railway automatically injects DATABASE_URL, NODE_ENV, and PORT
      # Include any other non-sensitive variables needed by your backend
      # Sensitive variables should be managed via Railway dashboard
      FRONTEND_URL: ${FRONTEND_URL} # Example: Should be set in Railway env vars
      # Other non-sensitive variables...
    # Define volumes if you need persistent storage (e.g., for uploads, though typically managed by S3/other services in prod)
    # volumes:
    #   - ./backend/src/uploads:/app/src/uploads # Example volume mapping
    # Restart policy for the container
    restart: unless-stopped

  frontend:
    # Specify the build context and Dockerfile for the frontend service
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Map the port (Next.js listens on 3000 by default unless PORT is set)
    # Remove or comment out for production on Railway if you rely solely on their networking
    # ports:
    #   - "3000:3000"
    # Define environment variables for the frontend
    environment:
      # Railway automatically injects PORT
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL} # Must be set in Railway env vars
      NEXT_PUBLIC_WEBSOCKET_URL: ${NEXT_PUBLIC_WEBSOCKET_URL} # Must be set in Railway env vars
      # Other NEXT_PUBLIC_ variables...
    # Ensure the frontend service depends on the backend service starting first
    # This doesn't guarantee the backend is "ready", just that the container starts
    depends_on:
      - backend
    # Restart policy for the container
    restart: unless-stopped

# Define networks if needed (Docker Compose creates a default bridge network)
# networks:
#   default:
#     driver: bridge

# Define volumes if needed (e.g., for database data, although managed by Railway/RDS)
# volumes:
#   db_data: # Example volume for database